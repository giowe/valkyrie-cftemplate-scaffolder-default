Description: 'Lambda'

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  LambdaDescription:
    Description: Lambda function description
    Type: String
    Default: 'Valkyrie default description'

  MemorySize:
    Description: Memory size
    Type: Number
    Default: 128

  Handler:
    Description: Function handler
    Type: String
    Default: 'index.handler'

  Runtime:
    Description: Lambda Runtime
    Type: String
    Default: 'nodejs6.10'

  Timeout:
    Description: Lambda execution timeout
    Type: Number
    Default: 3

  S3Bucket:
    Description: S3 Bucket containing lambda code
    Type: String

  S3ObjectVersion:
    Description: S3 Object version
    Type: String
    Default: ''

  ParentVPCStack:
    Description: Optional vpc stack name
    Type: String
    Default: ''

  ParentSecurityGroupStack:
    Description: Parent security group stack
    Type: String
    Default: ''

Conditions:
  HasS3ObjectVersion: !Not [!Equals [!Ref S3ObjectVersion, '']]
  HasParentVPCStack: !Not [!Equals [!Ref ParentVPCStack, '']]

Resources:

  ValkLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
      RoleName: !Sub ${EnvironmentName}-valk-lambda-role
      Policies:
        - PolicyName: !Sub AWSLambdaBasicExecutionRole-${EnvironmentName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Join ['', ['arn:aws:logs:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ':*']]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join ['',['arn:aws:logs:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ':log-group:/aws/lambda/', ${EnvironmentName}, ':*']]
              - Fn::If:
                - HasVpcStackName
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                  Resource: '*'
                - !Ref "AWS::NoValue"

  ValkLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${EnvironmentName}-lambda-code
        S3ObjectVersion:
          !If [HasS3ObjectVersion, !Ref S3ObjectVersion, !Ref "AWS::NoValue"]
      Description: !Ref LambdaDescription
      FunctionName: !Sub ${EnvironmentName}
      MemorySize: !Ref MemorySize
      Role: !GetAtt ValkLambdaRole.Arn
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout
      VPCConfig:
        Fn::If:
          - HasVpcStackName
          - SubnetIds: 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPrivate'
            SecurityGroupIds:
              - 'Fn::ImportValue': !Sub '${ParentSecurityGroupStack}-LambdaSecurityGroup'
          - !Ref "AWS::NoValue"

Outputs:
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'
  Lambda:
    Description: 'Lambda arn'
    Value: !GetAtt ValkLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-Lambda'
  LambdaRole:
    Description: 'Lambda role arn'
    Value: !GetAtt ValkLambdaRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRole'
